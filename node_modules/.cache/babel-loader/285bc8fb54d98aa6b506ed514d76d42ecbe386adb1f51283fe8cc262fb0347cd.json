{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// 0. 값 조회\nexport const __getTodos = createAsyncThunk(\"GET_TODOS\", async (arg, thunkAPI) => {\n  try {\n    // 무조건!\n    const todos = await axios.get(\"http://localhost:3001/todos\");\n    // console.log(\"todos.data\", todos.data);\n    return thunkAPI.fulfillWithValue(todos.data);\n  } catch (err) {\n    // 만약 오류가 나면 여기!\n    return thunkAPI.rejectWithValue(err);\n  }\n});\n\n// 1. 추가\nexport const __addTodoThunk = createAsyncThunk(\"ADD_TODO\", async (arg, thunkAPI) => {\n  try {\n    // 시도할 내용\n    const response = await axios.post(\"http://localhost:3001/todos\", arg);\n    // console.log(\"response\", response);\n    return thunkAPI.fulfillWithValue(response.data);\n    // return thunkAPI.fulfillWithValue(arg);\n  } catch (err) {\n    // 오류가 났을 때의 내용\n    console.log(err);\n    return thunkAPI.rejectWithValue(err);\n  }\n});\n\n// 2. 삭제\nexport const __deleteTodoThunk = createAsyncThunk(\"DELETE_TODO\", async (arg, thunkAPI) => {\n  try {\n    // 삭제할 내용\n    const response = await axios.delete(\"http://localhost:3001/todos\", arg);\n    // console.log(\"response\", response);\n    return thunkAPI.fulfillWithValue(response.data);\n    // return thunkAPI.fulfillWithValue(arg);\n  } catch (err) {\n    // 오류가 났을 때의 내용\n    console.log(err);\n    return thunkAPI.rejectWithValue(err);\n  }\n});\n\n// 3. 스위치\nexport const __switchTodoThunk = createAsyncThunk(\"SWITCH_TODO\", async (arg, thunkAPI) => {\n  try {\n    // 스위치할 내용\n    const response = await axios.switch(\"http://localhost:3001/todos\", arg);\n    // console.log(\"response\", response);\n    return thunkAPI.fulfillWithValue(response.data);\n    // return thunkAPI.fulfillWithValue(arg);\n  } catch (err) {\n    // 오류가 났을 때의 내용\n    console.log(err);\n    return thunkAPI.rejectWithValue(err);\n  }\n});\n\n// initial states\nconst initialState = {\n  todos: [],\n  isSuccess: false,\n  isLoading: false,\n  error: null\n};\n\n// createSlice의 결과물 -> action creators와 reducers\nconst todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    // addTodo: (state, action) => {\n    //   return [...state, action.payload];\n    // }, // action creator의 이름\n    removeTodo: (state, action) => {\n      return state.filter(item => item.id !== action.payload);\n    },\n    // action creator의 이름\n    switchTodo: (state, action) => {\n      return state.map(item => {\n        if (item.id === action.payload) {\n          return {\n            ...item,\n            isDone: !item.isDone\n          };\n        } else {\n          return item;\n        }\n      });\n    } // action creator의 이름\n  },\n\n  extraReducers: {\n    [__getTodos.fulfilled]: (state, action) => {\n      state.todos = action.payload;\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state;\n      //\n    },\n\n    [__addTodoThunk.fulfilled]: (state, action) => {\n      state.todos.push(action.payload);\n    },\n    [__addTodoThunk.rejected]: (state, action) => {\n      //\n    },\n    [__deleteTodoThunk.fulfilled]: (state, action) => {\n      state.todos = state.todos.filter(item => item.id !== action.payload);\n    },\n    [__deleteTodoThunk.rejected]: (state, action) => {\n      //\n    },\n    [__switchTodoThunk.fulfilled]: (state, action) => {\n      return state.map(item => {\n        if (item.id === action.payload) {\n          return {\n            ...item,\n            isDone: !item.isDone\n          };\n        } else {\n          return item;\n        }\n      });\n    },\n    [__switchTodoThunk.rejected]: (state, action) => {\n      //\n    }\n  }\n});\nexport const {\n  removeTodo,\n  switchTodo\n} = todosSlice.actions;\nexport default todosSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","__getTodos","arg","thunkAPI","todos","get","fulfillWithValue","data","err","rejectWithValue","__addTodoThunk","response","post","console","log","__deleteTodoThunk","delete","__switchTodoThunk","switch","initialState","isSuccess","isLoading","error","todosSlice","name","reducers","removeTodo","state","action","filter","item","id","payload","switchTodo","map","isDone","extraReducers","fulfilled","rejected","push","actions","reducer"],"sources":["/Users/parkyujin/Desktop/Thunk/src/redux/modules/todos.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// 0. 값 조회\nexport const __getTodos = createAsyncThunk(\n  \"GET_TODOS\",\n  async (arg, thunkAPI) => {\n    try {\n      // 무조건!\n      const todos = await axios.get(\"http://localhost:3001/todos\");\n      // console.log(\"todos.data\", todos.data);\n      return thunkAPI.fulfillWithValue(todos.data);\n    } catch (err) {\n      // 만약 오류가 나면 여기!\n      return thunkAPI.rejectWithValue(err);\n    }\n  }\n);\n\n// 1. 추가\nexport const __addTodoThunk = createAsyncThunk(\n  \"ADD_TODO\",\n  async (arg, thunkAPI) => {\n    try {\n      // 시도할 내용\n      const response = await axios.post(\"http://localhost:3001/todos\", arg);\n      // console.log(\"response\", response);\n      return thunkAPI.fulfillWithValue(response.data);\n      // return thunkAPI.fulfillWithValue(arg);\n    } catch (err) {\n      // 오류가 났을 때의 내용\n      console.log(err);\n      return thunkAPI.rejectWithValue(err);\n    }\n  }\n);\n\n// 2. 삭제\nexport const __deleteTodoThunk = createAsyncThunk(\n  \"DELETE_TODO\",\n  async (arg, thunkAPI) => {\n    try {\n      // 삭제할 내용\n      const response = await axios.delete(\"http://localhost:3001/todos\", arg);\n      // console.log(\"response\", response);\n      return thunkAPI.fulfillWithValue(response.data);\n      // return thunkAPI.fulfillWithValue(arg);\n    } catch (err) {\n      // 오류가 났을 때의 내용\n      console.log(err);\n      return thunkAPI.rejectWithValue(err);\n    }\n  }\n);\n\n// 3. 스위치\nexport const __switchTodoThunk = createAsyncThunk(\n  \"SWITCH_TODO\",\n  async (arg, thunkAPI) => {\n    try {\n      // 스위치할 내용\n      const response = await axios.switch(\"http://localhost:3001/todos\", arg);\n      // console.log(\"response\", response);\n      return thunkAPI.fulfillWithValue(response.data);\n      // return thunkAPI.fulfillWithValue(arg);\n    } catch (err) {\n      // 오류가 났을 때의 내용\n      console.log(err);\n      return thunkAPI.rejectWithValue(err);\n    }\n  }\n);\n\n// initial states\nconst initialState = {\n  todos: [],\n  isSuccess: false,\n  isLoading: false,\n  error: null,\n};\n\n// createSlice의 결과물 -> action creators와 reducers\nconst todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    // addTodo: (state, action) => {\n    //   return [...state, action.payload];\n    // }, // action creator의 이름\n    removeTodo: (state, action) => {\n      return state.filter((item) => item.id !== action.payload);\n    }, // action creator의 이름\n    switchTodo: (state, action) => {\n      return state.map((item) => {\n        if (item.id === action.payload) {\n          return { ...item, isDone: !item.isDone };\n        } else {\n          return item;\n        }\n      });\n    }, // action creator의 이름\n  },\n  extraReducers: {\n    [__getTodos.fulfilled]: (state, action) => {\n      state.todos = action.payload;\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state;\n      //\n    },\n    [__addTodoThunk.fulfilled]: (state, action) => {\n      state.todos.push(action.payload);\n    },\n    [__addTodoThunk.rejected]: (state, action) => {\n      //\n    },\n    [__deleteTodoThunk.fulfilled]: (state, action) => {\n      state.todos = state.todos.filter((item) => item.id !== action.payload);\n    },\n    [__deleteTodoThunk.rejected]: (state, action) => {\n      //\n    },\n    [__switchTodoThunk.fulfilled]: (state, action) => {\n      return state.map((item) => {\n        if (item.id === action.payload) {\n          return { ...item, isDone: !item.isDone };\n        } else {\n          return item;\n        }\n      });\n    },\n    [__switchTodoThunk.rejected]: (state, action) => {\n      //\n    },\n  },\n});\n\nexport const { removeTodo, switchTodo } = todosSlice.actions;\nexport default todosSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}